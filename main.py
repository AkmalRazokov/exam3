#  –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å ‚Äì Theoretical Part ‚Äì “ö–∏—Å–º–∞—Ç–∏ –Ω–∞–∑–∞—Ä–∏—è–≤”£
# 1.–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∫—É—Ä—Å–∏—è –∏ –∫–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?
# EN: What is recursion and how does it work?
# TJ: –†–µ–∫—É—Ä—Å–∏—è —á–∏—Å—Ç –≤–∞ –æ–Ω —á”£ —Ç–∞–≤—Ä –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥?



# –±–ª–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–∑—ã–≤–∞–µ—Ç —Å–µ–±—è –∏ —Ä–µ—à–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è


# 2.–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ –∑–∞–º—ã–∫–∞–Ω–∏–µ–º.
# EN: Explain the difference between a function and a closure.
# TJ: –¢–∞—Ñ–æ–≤—É—Ç –º–∏—ë–Ω–∏ —Ñ—É–Ω–∫—Å–∏—è –≤–∞ closure-—Ä–æ —Ñ–∞“≥–º–æ–Ω–µ–¥.


# closure –∞–∑ —Ñ—É–Ω–∫—Ü–∏—è–∏ –±–µ—Ä—É–Ω–≥–∏ –¥–∞—Ä—É–Ω–≥–∏—Ä–æ return –º–µ–∫—É–Ω–∞–¥


# 3.–î–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤ Python?
# EN: What are decorators used for in Python?
# TJ: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä“≥–æ –¥–∞—Ä Python –±–∞—Ä–æ–∏ —á”£ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –º–µ—à–∞–≤–∞–Ω–¥?

# –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–æ, –∏ –ø–æ—Å–ª–µ

# 4.**–ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã *args –∏ kwargs?
# EN: What are *args and **kwargs?
# TJ: *args –≤–∞ **kwargs —á”£ –º–∞—ä–Ω–æ –¥–æ—Ä–∞–Ω–¥?

# kwargs –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –æ—à–∏–±–æ–∫
# args - –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤


# 5.–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ?
# EN: What is the difference between local and global variables?
# TJ: –¢–∞—Ñ–æ–≤—É—Ç –º–∏—ë–Ω–∏ —Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞–∏ –º–∞“≥–∞–ª–ª”£ –≤–∞ —É–º—É–º”£ –¥–∞—Ä —á–∏—Å—Ç?

# –ª–æ–∫–∞–ª–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –¥–∞—Ä—É–Ω–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ö—É–¥–∞—à –¥–æ—Ö–∏–ª –º–µ—à–∞
# global-–æ–±—â–∏–π —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—Ö–ª –¥–æ—Ä–∞



# –∑–∞–¥–∞—á–∞ 1
# RU: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç.


# def greet(name="–ê–ª–∏",age=20):
#     return f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {name}. –ú–Ω–µ {age} –ª–µ—Ç."
# print(greet())   



# –ó–∞–¥–∞—á–∞ 2
# RU: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö —Å—É–º–º—É.

# EN: Create a function that takes two numbers and prints their sum.

# TJ: –§—É–Ω–∫—Å–∏—è–µ —ç“∑–æ–¥ –∫—É–Ω–µ–¥, –∫–∏ –¥—É –∞–¥–∞–¥—Ä–æ “õ–∞–±—É–ª –∫–∞—Ä–¥–∞, “∑–∞–º—ä–∞—à–æ–Ω—Ä–æ —á–æ–ø –∫—É–Ω–∞–¥.

# üì• –í–≤–æ–¥ / Input:

# 5 7
# üì§ –í—ã–≤–æ–¥ / Output:


# def sum(a, b):
#      return a+b
# print(sum(5, 7))




# –ó–∞–¥–∞—á–∞ 3
# RU: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏—Ç –µ—ë –¥–ª–∏–Ω—É.

# EN: Create a function that takes a string and prints its length.

# TJ: –§—É–Ω–∫—Å–∏—è–µ —ç“∑–æ–¥ –∫—É–Ω–µ–¥, –∫–∏ —Å–∞—Ç—Ä—Ä–æ “õ–∞–±—É–ª –∫–∞—Ä–¥–∞, –¥–∞—Ä–æ–∑–∏–∏ –æ–Ω—Ä–æ —á–æ–ø –∫—É–Ω–∞–¥.

# üì• –í–≤–æ–¥ / Input:


# hello
# üì§ –í—ã–≤–æ–¥ / Output:

# 5

# def func(text):
#     print(len(text))
# func('hello')




# –ó–∞–¥–∞—á–∞ 4
# RU: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—É–º–º—É —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª.

# EN: Create a function that takes a list of numbers and prints the sum of even numbers.

# TJ: –§—É–Ω–∫—Å–∏—è–µ —ç“∑–æ–¥ –∫—É–Ω–µ–¥, –∫–∏ —Ä”Ø–π—Ö–∞—Ç–∏ –∞–¥–∞–¥“≥–æ—Ä–æ “õ–∞–±—É–ª –∫–∞—Ä–¥–∞, “∑–∞–º—ä–±–∞—Å—Ç–∏ –∞–¥–∞–¥“≥–æ–∏ “∑—É—Ñ—Ç—Ä–æ —á–æ–ø –∫—É–Ω–∞–¥.

# üì• –í–≤–æ–¥ / Input:

# [1, 2, 3, 4, 5, 6]
# üì§ –í—ã–≤–æ–¥ / Output:

# 12


# def func(lst):
#     sum=0
#     for i in lst:
#         if i % 2 == 0:
#             sum+=i
#     return sum
# print (func(lst=[1,2,3,4,5,6]))






# –ó–∞–¥–∞—á–∞ 5
# RU: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ).

# EN: Create a function that returns the n-th Fibonacci number (recursively).

# TJ: –§—É–Ω–∫—Å–∏—è–µ —ç“∑–æ–¥ –∫—É–Ω–µ–¥, –∫–∏ –∞–¥–∞–¥–∏ n-—É–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏—Ä–æ –±–∞—Ä–º–µ–≥–∞—Ä–¥–æ–Ω–∞–¥ (—Ä–µ–∫—É—Ä—Å–∏–≤”£).

# üì• –í–≤–æ–¥ / Input:

# 6
# üì§ –í—ã–≤–æ–¥ / Output:

# 8

# def fib (n):
#     if n==1:
#         return 1
#     if n==2:
#         return 1
#     return fib(n-1)+fib(n-2)
# print(fib(6))




# –ó–∞–¥–∞—á–∞ 6
# RU: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—é—â–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∫ –∞—Ä–≥—É–º–µ–Ω—Ç—É.

# EN: Create a function that returns a closure adding a fixed number to its argument.

# TJ: –§—É–Ω–∫—Å–∏—è–µ —ç“∑–æ–¥ –∫—É–Ω–µ–¥, –∫–∏ closure –±–∞—Ä–º–µ–≥–∞—Ä–¥–æ–Ω–∞–¥, –∫–∏ –∞–¥–∞–¥–∏ –¥–æ–¥–∞—à—É–¥–∞—Ä–æ –±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç –∑–∞–º –º–µ–∫—É–Ω–∞–¥.

# üì• –í–≤–æ–¥ / Input:


# add5 = make_adder(5); add5(10)
# üì§ –í—ã–≤–æ–¥ / Output:
 
# 15


# def make_adder(m):
#     def inner (n):
#         return m+n
#     return inner
# add=make_adder(10)
# print(add(5))





# –ó–∞–¥–∞—á–∞ 7
# RU: –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–µ—Ç "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...".

# EN: Create a decorator that prints "Running..." before calling the function.

# TJ: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ —ç“∑–æ–¥ –∫—É–Ω–µ–¥, –∫–∏ –ø–µ—à –∞–∑ –∏“∑—Ä–æ "–î–∞—Ä “≥–æ–ª–∏ –∏“∑—Ä–æ..." —á–æ–ø –º–µ–∫—É–Ω–∞–¥.

# üì• –í–≤–æ–¥ / Input:

# @trace
# def hello():
#     print("–ü—Ä–∏–≤–µ—Ç!")
# hello()
# üì§ –í—ã–≤–æ–¥ / Output:

# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
# –ü—Ä–∏–≤–µ—Ç!


# def counter(func):
#     def inner(*args):
#         print('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...')
#         func(*args)
#     return inner


# @counter
# def hello():
#     print('–ü—Ä–∏–≤–µ—Ç!')
# hello()




# –ó–∞–¥–∞—á–∞ 8
# RU: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.

# EN: Create a function that takes a list of strings and prints the longest string.

# TJ: –§—É–Ω–∫—Å–∏—è–µ —ç“∑–æ–¥ –∫—É–Ω–µ–¥, –∫–∏ —Ä”Ø–π—Ö–∞—Ç–∏ —Å–∞—Ç—Ä“≥–æ—Ä–æ “õ–∞–±—É–ª –∫–∞—Ä–¥–∞, –¥–∞—Ä–æ–∑—Ç–∞—Ä–∏–Ω —Å–∞—Ç—Ä—Ä–æ —á–æ–ø –∫—É–Ω–∞–¥.

# üì• –í–≤–æ–¥ / Input:

# ["apple", "banana", "kiwi", "strawberry"]
# üì§ –í—ã–≤–æ–¥ / Output:
 
# strawberry

# str1=["apple", "banana", "kiwi", "strawberry"]
# long=""
# cnt=""

# for i in str1:
   
#         if len(cnt)>len(long):
#             long=cnt
#         cnt= ""

# print(long)



# –ó–∞–¥–∞—á–∞ 9
# RU: –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ—ë.

# EN: Create a function that recursively reverses a string.

# TJ: –§—É–Ω–∫—Å–∏—è–µ —ç“∑–æ–¥ –∫—É–Ω–µ–¥, –∫–∏ —Å–∞—Ç—Ä—Ä–æ –±–∞ —Ç–∞–≤—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–≤”£ —á–∞–ø–ø–∞ –º–µ–∫—É–Ω–∞–¥.

# üì• –í–≤–æ–¥ / Input:

# text
 
# üì§ –í—ã–≤–æ–¥ / Output:

 
# "nohtyp"

# def reverse_string(s):
#     if len(s)==1:
#         return s
#     return reverse_string(s[1:])+s[0]
# print(reverse_string('python'))




# –ó–∞–¥–∞—á–∞ 10
# RU: –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –µ–≥–æ.

# EN: Write a decorator that counts how many times the function was called and prints it.

# TJ: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ –Ω–∞–≤–∏—Å–µ–¥, –∫–∏ —à—É–º–æ—Ä–∞–∏ –¥–∞—ä–≤–∞—Ç“≥–æ–∏ —Ñ—É–Ω–∫—Å–∏—è—Ä–æ “≥–∏—Å–æ–± –∫–∞—Ä–¥–∞, —á–æ–ø –º–µ–∫—É–Ω–∞–¥.

# üì• –í–≤–æ–¥ / Input:

 
# @counter
# def f():
#     pass
# f()
# f()
# f()
# üì§ –í—ã–≤–æ–¥ / Output:

 
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 1 —Ä–∞–∑
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 2 —Ä–∞–∑
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ 3 —Ä–∞–∑




# def counter(func):
#     n=0
#     def inner(*args):
#         nonlocal n
#         n+=1
#         print (f'—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞',n, end=" ")
#         func(*args)
#     return inner


# @counter
# def f ():
#     print()
# f()
# f()
# f()


